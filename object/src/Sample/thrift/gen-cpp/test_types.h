/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef test_TYPES_H
#define test_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace test {

class WorkTask;

typedef struct _WorkTask__isset {
  _WorkTask__isset() : V32(false), V64(false), Vstr(false) {}
  bool V32 :1;
  bool V64 :1;
  bool Vstr :1;
} _WorkTask__isset;

class WorkTask {
 public:

  WorkTask(const WorkTask&);
  WorkTask& operator=(const WorkTask&);
  WorkTask() : V32(0), V64(0), Vstr() {
  }

  virtual ~WorkTask() throw();
  int32_t V32;
  int64_t V64;
  std::string Vstr;

  _WorkTask__isset __isset;

  void __set_V32(const int32_t val);

  void __set_V64(const int64_t val);

  void __set_Vstr(const std::string& val);

  bool operator == (const WorkTask & rhs) const
  {
    if (!(V32 == rhs.V32))
      return false;
    if (!(V64 == rhs.V64))
      return false;
    if (!(Vstr == rhs.Vstr))
      return false;
    return true;
  }
  bool operator != (const WorkTask &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WorkTask & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(WorkTask &a, WorkTask &b);

inline std::ostream& operator<<(std::ostream& out, const WorkTask& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
